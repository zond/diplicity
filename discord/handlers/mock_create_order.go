// Code generated by MockGen. DO NOT EDIT.
// Source: create_order.go
//
// Generated by this command:
//
//	mockgen -source=create_order.go -destination=mock_create_order.go -package=handlers
//

// Package handlers is a generated GoMock package.
package handlers

import (
	reflect "reflect"

	discordgo "github.com/bwmarrin/discordgo"
	gomock "go.uber.org/mock/gomock"
)

// MockSession is a mock of Session interface.
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
}

// MockSessionMockRecorder is the mock recorder for MockSession.
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance.
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSession) EXPECT() *MockSessionMockRecorder {
	return m.recorder
}

// InteractionRespond mocks base method.
func (m *MockSession) InteractionRespond(interaction *discordgo.Interaction, response *discordgo.InteractionResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InteractionRespond", interaction, response)
	ret0, _ := ret[0].(error)
	return ret0
}

// InteractionRespond indicates an expected call of InteractionRespond.
func (mr *MockSessionMockRecorder) InteractionRespond(interaction, response any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InteractionRespond", reflect.TypeOf((*MockSession)(nil).InteractionRespond), interaction, response)
}

// MockApi is a mock of Api interface.
type MockApi struct {
	ctrl     *gomock.Controller
	recorder *MockApiMockRecorder
}

// MockApiMockRecorder is the mock recorder for MockApi.
type MockApiMockRecorder struct {
	mock *MockApi
}

// NewMockApi creates a new mock instance.
func NewMockApi(ctrl *gomock.Controller) *MockApi {
	mock := &MockApi{ctrl: ctrl}
	mock.recorder = &MockApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApi) EXPECT() *MockApiMockRecorder {
	return m.recorder
}

// ListAvailableSourceUnits mocks base method.
func (m *MockApi) ListAvailableSourceUnits(userID, gameID, phaseID string) ([]discordgo.SelectMenuOption, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAvailableSourceUnits", userID, gameID, phaseID)
	ret0, _ := ret[0].([]discordgo.SelectMenuOption)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvailableSourceUnits indicates an expected call of ListAvailableSourceUnits.
func (mr *MockApiMockRecorder) ListAvailableSourceUnits(userID, gameID, phaseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailableSourceUnits", reflect.TypeOf((*MockApi)(nil).ListAvailableSourceUnits), userID, gameID, phaseID)
}
